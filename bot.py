# bot.py
import telebot
import mysql.connector
from datetime import datetime
import config 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return mysql.connector.connect(
        host=config.DB_HOST,
        user=config.DB_USER,
        password=config.DB_PASSWORD,
        database=config.DB_NAME
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("üîê –ú–æ–π —Å—Ç–∞—Ç—É—Å")
    #btn2 = telebot.types.KeyboardButton("üìÖ –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å")
    btn3 = telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    keyboard.add(btn1)
    keyboard.add(btn3)

    bot.reply_to(
        message,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìå <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üî∏ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üî∏ /status ‚Äî —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
        "üî∏ /upcoming ‚Äî —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "üî∏ /help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üì¨ <b> –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>+7 (495) 123-45-67</code>\n"
        "üìß Email: <code>ep-support@company.local</code>\n"
        "üë§ Telegram: <a href='https://t.me/@deeanahhh'>@deeanahhh</a>"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=['status'])
def send_status(message):
    user_id = str(message.from_user.id)
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT e.full_name, e.position, c.serial_number, c.valid_to, c.status, c.certificate_type
            FROM certificates c
            JOIN employees e ON c.employee_id = e.id
            WHERE e.telegram_id = %s
            ORDER BY c.valid_to DESC
        """, (user_id,))
        results = cursor.fetchall()
        conn.close()

        if results:
            response = "üîê <b>–°—Ç–∞—Ç—É—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π</b>\n\n"
            for idx, result in enumerate(results, start=1):
                days_left = (result['valid_to'].date() - datetime.now().date()).days
                status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if days_left > 0 else "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
                expiring = " ‚ö†Ô∏è –°—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç!" if 0 < days_left <= 7 else ""

                response += (
                    f"<u>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {idx}</u>\n"
                    f"üë§ <b>–§–ò–û:</b> {result['full_name']}\n"
                    f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {result['position']}\n"
                    f"üî¢ <b>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <code>{result['serial_number']}</code>\n"
                    f"üìÜ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {result['valid_to'].strftime('%d.%m.%Y')}\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n"
                    f"üîñ <b>–¢–∏–ø:</b> {result['certificate_type']}\n"
                    f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{expiring}\n\n"
                )

            bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –í–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à Telegram ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == "üîê –ú–æ–π —Å—Ç–∞—Ç—É—Å")
def button_status(message):
    send_status(message)

# @bot.message_handler(func=lambda message: message.text == "üìÖ –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å")
# def button_upcoming(message):
#     send_upcoming(message)

@bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
def button_help(message):
    send_help(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.send_message(
        message.chat.id,
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()